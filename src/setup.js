const readlineSync = require('readline-sync');
const fs = require('fs');
const path = require('path');
const os = require('os');

class Setup {
  constructor() {
    this.configDir = path.join(os.homedir(), '.gitlab-poller');
    this.envPath = path.join(this.configDir, '.env');
  }

  async run() {
    console.log('\n🚀 Welcome to GitLab Poller Setup!\n');
    console.log('This wizard will help you configure GitLab Poller.\n');

    // Create config directory if it doesn't exist
    if (!fs.existsSync(this.configDir)) {
      fs.mkdirSync(this.configDir, { recursive: true });
    }

    // Check if config already exists
    if (fs.existsSync(this.envPath)) {
      const overwrite = readlineSync.keyInYN('Configuration already exists. Do you want to overwrite it?');
      if (!overwrite) {
        console.log('\nSetup cancelled.');
        return false;
      }
    }

    console.log('\n📋 Please provide the following required information:\n');

    // Collect required configuration
    const config = {};

    // GitLab Base URL
    config.GITLAB_BASE_URL = readlineSync.question('GitLab Base URL (e.g., https://gitlab.com): ', {
      defaultInput: 'https://gitlab.com',
      limit: /^https?:\/\/.+/,
      limitMessage: 'Please enter a valid URL starting with http:// or https://'
    });

    // GitLab Access Token
    config.GITLAB_ACCESS_TOKEN = readlineSync.question('GitLab Access Token: ', {
      hideEchoBack: true,
      limit: /^.+$/,
      limitMessage: 'Access token cannot be empty'
    });

    // GitLab Group ID
    config.GITLAB_GROUP_ID = readlineSync.question('GitLab Group ID (username or numeric ID): ', {
      limit: /^.+$/,
      limitMessage: 'Group ID cannot be empty'
    });

    // Optional: Polling Interval
    const customInterval = readlineSync.keyInYN('\nDo you want to set a custom polling interval? (default: 1 minute)');
    if (customInterval) {
      config.POLLING_INTERVAL = readlineSync.questionInt('Polling interval in minutes: ', {
        defaultInput: 1,
        min: 1,
        limitMessage: 'Please enter a number greater than 0'
      });
    } else {
      config.POLLING_INTERVAL = 1;
    }

    // Optional: For SSL issues
    const sslIssues = readlineSync.keyInYN('\nDo you have SSL certificate issues? (not recommended for production)');
    if (sslIssues) {
      config.NODE_TLS_REJECT_UNAUTHORIZED = 0;
    }

    // Write configuration to file
    this.writeConfig(config);

    console.log('\n✅ Configuration saved successfully!');
    console.log(`📁 Config location: ${this.envPath}`);
    console.log('\nYou can now run: npx gitlab-poller\n');

    return true;
  }

  writeConfig(config) {
    const content = [
      '# GitLab Poller Configuration',
      '# Generated by setup wizard',
      '',
      '# GitLab Configuration',
      `GITLAB_BASE_URL=${config.GITLAB_BASE_URL}`,
      `GITLAB_ACCESS_TOKEN=${config.GITLAB_ACCESS_TOKEN}`,
      `GITLAB_GROUP_ID=${config.GITLAB_GROUP_ID}`,
      '',
      '# Polling Configuration',
      `POLLING_INTERVAL=${config.POLLING_INTERVAL}`,
    ];

    if (config.NODE_TLS_REJECT_UNAUTHORIZED !== undefined) {
      content.push('');
      content.push('# SSL Configuration');
      content.push(`NODE_TLS_REJECT_UNAUTHORIZED=${config.NODE_TLS_REJECT_UNAUTHORIZED}`);
    }

    fs.writeFileSync(this.envPath, content.join('\n') + '\n');
  }

  isConfigured() {
    return fs.existsSync(this.envPath);
  }

  loadConfig() {
    if (!this.isConfigured()) {
      return null;
    }

    try {
      const content = fs.readFileSync(this.envPath, 'utf8');
      const config = {};

      content.split('\n').forEach(line => {
        line = line.trim();
        if (line && !line.startsWith('#')) {
          const [key, ...valueParts] = line.split('=');
          if (key && valueParts.length > 0) {
            config[key.trim()] = valueParts.join('=').trim();
          }
        }
      });

      return config;
    } catch (error) {
      console.error('Failed to load configuration:', error.message);
      return null;
    }
  }
}

module.exports = Setup;